using FluentAssertions;
using Xunit;

namespace LeetCode.MinFallingPathSum
{
    public class MinFallingPathSumTests
    {
        private readonly MinFallingPathSumAlgorithm algorithm = new();

        [Theory]
        [InlineData("[[2,1,3],[6,5,4],[7,8,9]]", 13)]
        [InlineData("[[2,1,3,5],[6,5,4,2],[7,8,9,1]]", 6)]
        [InlineData("[[-19,57],[-40,-5]]", -59)]
        [InlineData("[[-48]]", -48)]
        public void ItReturnsMinFallingPathSum(string matrixString,int expected)
        {
            var matrix = Matrix.Parse(matrixString);
            var actual = algorithm.MinFallingPathSum(matrix);

            actual.Should().Be(expected);
        }

        [Fact]
        public void ItReturnsMinFallingPathSumHugeMatrix()
        {
            var matrix = Matrix.Parse("[[-19,-1,-96,48,-94,36,16,55,-42,37,-59,6,-32,96,95,-58,13,-34,94,85],[17,44,36,-29,84,80,-34,50,-99,64,13,91,-27,25,-36,57,20,98,-100,-72],[-92,-75,86,90,-4,90,64,56,50,-63,10,-15,90,-66,-66,32,-69,-78,1,60],[21,51,-47,-43,-14,99,44,90,8,11,99,-62,57,59,69,50,-69,32,85,13],[-28,90,12,-18,23,61,-55,-97,6,89,36,26,26,-1,46,-50,79,-45,89,86],[-85,-10,49,-10,2,62,41,92,-67,85,86,27,89,-50,77,55,22,-82,-94,-98],[-50,53,-23,55,25,-22,76,-93,-7,66,-75,42,-35,-96,-5,4,-92,13,-31,-100],[-62,-78,8,-92,86,69,90,-37,81,97,53,-45,34,19,-19,-39,-88,-75,-74,-4],[29,53,-91,65,-92,11,49,26,90,-31,17,-84,12,63,-60,-48,40,-49,-48,88],[100,-69,80,11,-93,17,28,-94,52,64,-86,30,-9,-53,-8,-68,-33,31,-5,11],[9,64,-31,63,-84,-15,-30,-10,67,2,98,73,-77,-37,-96,47,-97,78,-62,-17],[-88,-38,-22,-90,54,42,-29,67,-85,-90,-29,81,52,35,13,61,-18,-94,61,-62],[-23,-29,-76,-30,-65,23,31,-98,-9,11,75,-1,-84,-90,73,58,72,-48,30,-81],[66,-33,91,-6,-94,82,25,-43,-93,-25,-69,10,-71,-65,85,28,-52,76,25,90],[-3,78,36,-92,-52,-44,-66,-53,-55,76,-7,76,-73,13,-98,86,-99,-22,61,100],[-97,65,2,-93,56,-78,22,56,35,-24,-95,-13,83,-34,-51,-73,2,7,-86,-19],[32,94,-14,-13,-6,-55,-21,29,-21,16,67,100,77,-26,-96,22,-5,-53,-92,-36],[60,93,-79,76,-91,43,-95,-16,74,-21,85,43,21,-68,-32,-18,18,100,-43,1],[87,-31,26,53,26,51,-61,92,-65,17,-41,27,-42,-14,37,-46,46,-31,-74,23],[-67,-14,-20,-85,42,36,56,9,11,-66,-59,-55,5,64,-29,77,47,44,-33,-77]]");
            var actual = algorithm.MinFallingPathSum(matrix);

            actual.Should().Be(-1428);
        }
        [Fact]
        public void ItReturnsMinFallingPathSumHugeMatrix2()
        {
            var matrix = Matrix.Parse("[[-68,-99,-79,-23,-49,-3,-6,3,-74,-1,91,-66,-97,-32,42,73,-79,-94,-38,25],[85,-34,56,-75,28,-50,52,83,-12,38,-29,70,-18,17,98,12,-9,-81,90,5],[40,31,-53,28,-81,-89,69,20,-40,5,12,36,-100,-71,-82,51,-10,-61,-25,34],[-8,9,88,-20,-80,-79,45,-38,-77,56,78,-80,23,48,-51,68,37,-11,-67,-49],[66,-67,41,14,12,-97,-76,-38,26,-24,-49,-23,-7,19,12,-27,-15,62,18,95],[21,-44,3,-5,71,48,76,44,-50,-46,-68,76,80,-35,-96,-5,58,41,35,-96],[-80,46,64,-64,64,91,20,10,-94,-17,-7,91,-12,-98,13,-87,99,32,44,39],[89,-19,-44,-85,-96,-5,49,48,-100,23,67,74,54,-16,41,41,-88,-93,-31,29],[-24,29,53,55,-44,95,11,26,27,35,-70,35,-14,94,43,95,99,67,17,20],[-6,-26,-16,83,29,-66,-93,-12,-12,-87,-55,-34,-25,25,-69,65,-1,-87,-80,89],[-94,30,-65,31,98,84,-13,-14,-42,-12,92,-93,-4,80,-79,-77,63,-44,60,-40],[-94,64,-34,-8,-88,30,66,-56,87,27,10,-59,76,-15,-92,86,-26,-41,-89,-94],[-92,75,74,-6,-84,-73,90,12,59,-85,-87,56,-77,64,87,-14,-77,44,-11,0],[78,8,-73,-26,70,2,-84,1,-93,76,-51,46,99,80,6,-35,40,9,82,-52],[39,-70,-19,56,-27,-43,-30,-25,-99,-72,48,39,31,-73,-77,-2,-3,-75,94,64],[75,-66,31,63,-35,98,-81,59,-71,-50,-62,-77,34,-52,60,54,92,55,98,12],[-94,-34,-21,94,-16,-46,60,84,-91,97,45,100,30,-99,36,-55,98,87,73,42],[-50,86,65,27,-66,-60,13,19,-18,63,36,-49,-94,21,-34,78,-53,10,-61,94],[29,51,79,-9,9,-10,24,-33,65,-27,55,-97,-27,-4,81,45,47,27,81,45],[26,85,53,-98,74,-63,50,-17,-22,-70,-14,100,66,48,29,-57,-88,87,82,-100]]");
            var actual = algorithm.MinFallingPathSum(matrix);

            actual.Should().Be(-1243);
        }
    }
}
